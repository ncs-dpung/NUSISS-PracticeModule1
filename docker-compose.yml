version: '3'

services:
  db:
    container_name: db
    image: mysql:8.0.36
    ports:
      - "3306:3306"
    networks:
      - springapimysql-net
    environment:
      MYSQL_ROOT_PASSWORD: pwd123
      MYSQL_DATABASE: inventory_db
      MYSQL_USER: user123
      MYSQL_PASSWORD: pwd123
      TZ: Asia/Singapore
    volumes:
      - ./db:/docker-entrypoint-initdb.d  # Mount the db folder with initialization scripts
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "127.0.0.1", "-u", "$$MYSQL_USER", "--password=$$MYSQL_PASSWORD" ]
      timeout: 10s
      retries: 10
      start_period: 30s

  dev-be:
    container_name: dev_be
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    networks:
      - springapimysql-net
    entrypoint: sh ./bin/docker-entrypoint.dev.sh
    volumes:
      - ./backend:/be
    depends_on:
      db:
        condition: service_healthy

  dev-fe:
    container_name: dev_fe
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "4200:4200"
    networks:
      - app
    volumes:
      - ./frontend/src:/app/src
    command: ng serve --host 0.0.0.0

  dev:
    container_name: dev_nginx
    build:
      context: ./
      dockerfile: Dockerfile.dev
    ports:
      - "80:80"
    depends_on:
      dev-fe:
        condition: service_healthy
    networks:
      - springapimysql-net
      - app
            
  be:
    # just for testing prod container in local
    # (change env path to prod to test with prod db)
    # Steps performed in ci before docker build:
    # 1. mvn --batch-mode --update-snapshots verify -Pprod 
    # 2. mkdir staging && cp target/*.jar staging
    container_name: nusisspm1be
    build:
      context: ./backend
    ports:
      - "8080:8080"
    networks:
      - springapimysql-net
      - app
    env_file:
      - path: ./backend/env/env.dev
        required: true
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8080/api/healthcheck || exit 1
      timeout: 15s
      retries: 20
      start_period: 30s

  fe:
    # nginx prod fe in local
    container_name: nusisspm1fe
    build:
      context: ./frontend
    ports:
      - "80:80"
    networks:
      - app

  umlserver:
    container_name: uml
    image: plantuml/plantuml-server:tomcat
    ports:
      - 8000:8080

networks:
    springapimysql-net:
    app:
